Wu.List = Wu.Class.extend({
	
	
	initialize : function (D3container) {
		
		this.D3container = d3.select(D3container);

		this._D3fileList(D3container);

	},

	refresh : function (DATA) {

		this._D3fileList(DATA);
		
	},

	save : function (saveJSON) {

		// update, no callback
		var string = JSON.stringify(saveJSON);
		Wu.save('/api/file/update', string); 

	},


	// EDIT INPUT FIELDS
	// Currently only used for File Title
	editField : function (options) {

		var outerContext     	= options.outerContext;
		var input       	= outerContext._D3input(options, outerContext.updateAndRefresh);


	},


	// CREATE INPUT FIELD
	_D3input : function (options, blurFunction) {

		// Create input box
		var input 	    = Wu.DomUtil.create('input');
		    input.type 	    = 'text';
		    input.className = 'autocarto-input';
		    input.value     = options.value ? options.value : '';
		
		options.context.innerHTML = '';		

		options.context.appendChild(input);

		// Set input box to focus
		input.focus();

		// Set cursor in the beginning
		input.setSelectionRange(0,0);

		// Blur on enter
		document.addEventListener("keydown", function(e) {
			if ( e.keyCode == 13 ) input.blur();
		})				

		// Fire this when bluring
		input.onblur = function () {
			blurFunction(input, options);
		}
		
		return input;

	},	


	// INPUT FIELD ON BLUR
	updateAndRefresh : function (input, options) {

		// New Name
		var newName  = input.value;

		// Remove input field
		input.remove();

		// Update data object in DOM
		options.data.file.store[options.what] = newName;

		var DATA = options.allDATA;
		var that = options.outerContext;

		// Refresh list
		that._D3fileList(DATA);

		// create update object
		var saveJSON = {};
		var namesapce = options.what;

		saveJSON[namesapce] = newName;
		saveJSON.uuid 	    = options.fileUuid;

		// Save changes
		that.save(saveJSON);

		// Set app save status
		app.setSaveStatus();
			
	},			

	_D3fileList : function (DATA) {

			
		if ( !Wu.app.activeProject ) return;

		// Context
		var that = this;


		
		// BIND DATA TO WRAPPER
		// BIND DATA TO WRAPPER
		// BIND DATA TO WRAPPER

		var allFilesWrapper = 
			this.D3container
			.selectAll('.each-file')
			.data(DATA);



		// EACH FILE WRAPPER
		// EACH FILE WRAPPER
		// EACH FILE WRAPPER		


		// ENTER
		allFilesWrapper
			.enter()
			.append('div')
			.classed('each-file', true);
		
		// EXIT
		allFilesWrapper
			.exit()
			.remove();			




		// SELECT BUTTON
		// SELECT BUTTON
		// SELECT BUTTON			

		// BIND
		var fileSelectButton = 
			allFilesWrapper
			.selectAll('.file-select-button')
			.data(function(d) { return [d] });

		// ENTER
		fileSelectButton
			.enter()
			.append('div')
			.classed('file-select-button', true)
			.on('mousedown', function(d) {
			
				// Set active state of button
				if ( this.className == 'file-select-button active' ) {
					Wu.DomUtil.removeClass(this, 'active')
					d.checked = true;
				} else {
					Wu.DomUtil.addClass(this, 'active')
					d.checked = false;
				}			

				var selectedFile = d.fileUuid;

				// Store selected files 
				app.SidePane.DataLibrary.selectFile(selectedFile);
							
			});

		// UPDATE
		fileSelectButton
			.attr('class', function(d) {

				// MAKE SURE THAT THE SELECTED STATE ON FILES FOLLOWS ON UPDATE
				var selected = false;
				app.SidePane.DataLibrary.selectedFiles.forEach(function (sel) {
					if ( d.fileUuid == sel ) selected = true;
				})

				if ( selected ) return 'file-select-button active';
				else 		return 'file-select-button';
			})


		// EXIT
		fileSelectButton
			.exit()
			.remove();





		// FILE TITLE & DESCRIPTION WRAPPER
		// FILE TITLE & DESCRIPTION WRAPPER
		// FILE TITLE & DESCRIPTION WRAPPER	

		// BIND
		var fileTitleWrapper = 
			allFilesWrapper
			.selectAll('.file-title-wrapper')
			.data(function(d) { return [d] });

		// ENTER
		fileTitleWrapper
			.enter()
			.append('div')
			.classed('file-title-wrapper', true);


		// EXIT
		fileTitleWrapper
			.exit()
			.remove();




		// FILE TITLE
		// FILE TITLE
		// FILE TITLE				

		// BIND
		var fileTitle = 
			fileTitleWrapper
			.selectAll('.file-title')
			.data(function(d) { return [d] });

		// ENTER
		fileTitle
			.enter()
			.append('div')
			.classed('file-title', true)
			.on('dblclick', function(d) {				

				var options = {

					outerContext : that,
					context      : this,
					what         : 'name',
					allDATA      : DATA,
					data 	     : d,
					value        : d.file.store.name,
					fileUuid     : d.fileUuid

				}

				if ( app.SidePane.DataLibrary.sortedData ) options.allDATA = app.SidePane.DataLibrary.sortedData;

				that.editField(options);

			});

		// UPDATE
		fileTitle
			.html(function (d) { return d.file.store.name });

		// EXIT
		fileTitle
			.exit()
			.remove();


		// FILE DESCRIPTION
		// FILE DESCRIPTION
		// FILE DESCRIPTION

		// BIND
		var fileDescription = 
			fileTitleWrapper
			.selectAll('.file-description')
			.data(function(d) {

				return [d];
			});

		// ENTER
		fileDescription
			.enter()
			.append('div')
			.classed('file-description', true)
			.on('dblclick', function(d) {
				app.SidePane.DataLibrary.injectTags(d, this);
			});

		// UPDATE
		fileDescription
			.html(function (d) { 
			
				var keywords = d.file.store.keywords.join(', ');
				if ( keywords.length >= 2 ) var res = 'Tags: ' + keywords;
				else 			    var res = 'Add tags...';

				return res;

			});

		// EXIT
		fileDescription
			.exit()
			.remove();




		// FILETYPE WRAPPER
		// FILETYPE WRAPPER
		// FILETYPE WRAPPER

		// BIND
		var fileTypeWrapper = 
			allFilesWrapper
			.selectAll('.file-type')
			.data(function(d) {return [d]});

		// ENTER
		fileTypeWrapper
			.enter()
			.append('div')
			.classed('file-type', true);

		// EXIT
		fileTypeWrapper
			.exit()
			.remove();


		// FILETYPE
		// FILETYPE
		// FILETYPE

		// BIND
		var fileType = 
			fileTypeWrapper
			.selectAll('.file-type-inner')
			.data(function(d) {return [d.file.store.type]});

		// ENTER
		fileType
			.enter()
			.append('div')
			.classed('file-type-inner', true);

		// UPDATE
		fileType
			.html(function (d) { return d });

		// EXIT
		fileType
			.exit()
			.remove();



		// CATEGORY WRAPPER
		// CATEGORY WRAPPER
		// CATEGORY WRAPPER

		// BIND
		var fileCategory = 
			allFilesWrapper
			.selectAll('.file-category')
			.data(function(d) { 
				return [d];
			});

		// ENTER
		fileCategory
			.enter()
			.append('div')
			.classed('file-category', true)
			.on('dblclick', function (d) {
				app.SidePane.DataLibrary.injectCategory(d, this);
			
			});

		// EXIT
		fileCategory
			.exit()
			.remove();


		// CATEGORY
		// CATEGORY
		// CATEGORY

		// BIND
		var fileCategory = 
			fileCategory
			.selectAll('.file-category-inner')
			.data(function(d) { 
				return [d];
			});

		// ENTER
		fileCategory
			.enter()
			.append('div')
			.classed('file-category-inner', true)
			.on('dblclick', function (d) {
				app.SidePane.DataLibrary.injectCategory(d, this);
			
			});

		// UPDATE
		fileCategory
			.html(function (d) {
				var category = d.file.store.category ? d.file.store.category : '<span class="grayed">no category</span>';
			 	return category;
			 });

		// EXIT
		fileCategory
			.exit()
			.remove();



		// // KEYWORDS WRAPPER
		// // KEYWORDS WRAPPER
		// // KEYWORDS WRAPPER				


		// // BIND
		// var fileKeywordsWrapper = 
		// 	allFilesWrapper
		// 	.selectAll('.file-keywords-wrapper')
		// 	.data(function(d) {
		// 		return [d];
				
		// 	});

		// // ENTER
		// fileKeywordsWrapper
		// 	.enter()
		// 	.append('div')
		// 	.classed('file-keywords-wrapper', true)
		// 	.on('dblclick', function(d) {
		// 		app.SidePane.DataLibrary.injectTags(d, this);
		// 	});

		// // EXIT
		// fileKeywordsWrapper
		// 	.exit()
		// 	.remove();




		// // KEYWORDS INNER WRAPPER
		// // KEYWORDS INNER WRAPPER
		// // KEYWORDS INNER WRAPPER

		// // BIND
		// var fileKeywordsInnerWrapper = 
		// 	fileKeywordsWrapper
		// 	.selectAll('.file-keywords-inner-wrapper')
		// 	.data(function(d) {
		// 		return [d];
				
		// 	});

		// // ENTER
		// fileKeywordsInnerWrapper
		// 	.enter()
		// 	.append('div')
		// 	.classed('file-keywords-inner-wrapper', true);


		// fileKeywordsInnerWrapper
		// 	.html(function (d) {

		// 		var keywords = d.file.store.keywords.join(', ');
		// 		return keywords;
		// 	})

		// // EXIT
		// fileKeywordsInnerWrapper
		// 	.exit()
		// 	.remove();






		// CREATED TIME WRAPPER
		// CREATED TIME WRAPPER
		// CREATED TIME WRAPPER

		// BIND
		var fileCreatedWhenWrapper = 
			allFilesWrapper
			.selectAll('.file-created-when')
			.data(function(d) {				
				return [d]
			});

		// ENTER
		fileCreatedWhenWrapper
			.enter()
			.append('div')
			.classed('file-created-when', true);


		// EXIT
		fileCreatedWhenWrapper
			.exit()
			.remove();


		// CREATED TIME
		// CREATED TIME
		// CREATED TIME

		// BIND
		var fileCreatedWhen = 
			fileCreatedWhenWrapper
			.selectAll('.file-created-when-inner')
			.data(function(d) {
				createdDate = new Date(d.file.store.created).toDateString();
				return [createdDate]
			});

		// ENTER
		fileCreatedWhen
			.enter()
			.append('div')
			.classed('file-created-when-inner', true);

		// UPDATE
		fileCreatedWhen
			.html(function (d) { return d });

		// EXIT
		fileCreatedWhen
			.exit()
			.remove();




		// CREATED BY
		// CREATED BY
		// CREATED BY

		// BIND
		var fileCreatedBy = 
			allFilesWrapper
			.selectAll('.file-created-by')
			.data(function(d) {return [d.file.store.createdByName]});

		// ENTER
		fileCreatedBy
			.enter()
			.append('div')
			.classed('file-created-by', true);

		// UPDATE
		fileCreatedBy
			.html(function (d) { return d });

		// EXIT
		fileCreatedBy
			.exit()
			.remove();





		// STATUS WRAPPER
		// STATUS WRAPPER
		// STATUS WRAPPER

		// BIND
		var fileStatusWrapper = 
			allFilesWrapper
			.selectAll('.file-status')
			.data(function(d) { 
				return [d];
			});

		// ENTER
		fileStatusWrapper
			.enter()
			.append('div')
			.classed('file-status', true);

		// EXIT
		fileStatusWrapper
			.exit()
			.remove();


		// STATUS
		// STATUS
		// STATUS

		// BIND
		var fileStatus = 
			fileStatusWrapper
			.selectAll('.file-status-inner')
			.data(function(d) { 
			
				var status = d.file.store.status ? d.file.store.status : 'status';
				return [status];
			});

		// ENTER
		fileStatus
			.enter()
			.append('div')
			.classed('file-status-inner', true);

		// UPDATE
		fileStatus
			.html(function (d) { return d });

		// EXIT
		fileStatus
			.exit()
			.remove();








		// FILE LIST OF FILES
		// FILE LIST OF FILES
		// FILE LIST OF FILES

		// BIND
		var fileListOfFiles = 
			allFilesWrapper
			.selectAll('.file-list-of-files')
			.data(function(d) { return [d.file.store.files] });

		// ENTER
		fileListOfFiles
			.enter()
			.append('div')
			.classed('file-list-of-files', true);

		// EXIT
		fileListOfFiles
			.exit()
			.remove();



		// FILE FILES
		// FILE FILES
		// FILE FILES

		// BIND
		var fileFiles = 
			fileListOfFiles
			.selectAll('.file-files')
			.data(function(d) {return d});

		// ENTER
		fileFiles
			.enter()
			.append('div')
			.classed('file-files', true);

		// UPDATE
		fileFiles
			.html(function (d) { return d });

		// EXIT
		fileFiles
			.exit()
			.remove();


		

	},



	add : function (entry) {

	},

	remove : function () {

	},





})

Wu.DataLibraryList = Wu.List.extend({

	// refresh : function () {

	// },






})


Wu.UserList = Wu.List.extend({

	refresh : function () {
		this._data = {
			// user list
		}
	},

})


// this._userList = new Wu.UserList(options);

// this._userList.add({
// 	newEntry : 'cunt'
// })
// var dataLibraryList = new Wu.DataLibraryList(options);